## JULY 2021 MERGE REQUESTS

*Note: a "merge request" is GitLab's version of Github's "pull request"*

### Branch Conventions

* `dev` is our 'clean development' branch, from which people working on the codebase pull and merge from. Ideally, it's a 'clean' branch where each merge request has been squashed into a single commit.
* To make **code changes**, make a 'local feature branch' from `dev` and name it as `dev-[id]/my-feature`. For example, `dev-sri/gassy-elephants` is Sri's branch where she's making a feature that has gas-filled elephants, whatever that might be.
* Optionally push your branch from local to origin (the GitLab repo) to back-up and share your work-in-progress code with others.

### Merge Requests

* `@dev-merge` is our 'work-in-progress' branch, where we submit our feature branch for testing. This branch will contain **all** the commits you may have made, so the complete history will be preserved.
* When your feature branch is ready for merging, create a **merge request to `@dev-merge` and let someone know they need to test it.

Your merge request should **at minimum** describe:

* What the merge request is doing. Is it a new feature? A bug fix?
* What changes can be tested or experienced, with clear step-by-step instructions because we can't read your mind. 
* Whether it addressing a pre-existing issue. Tag related issues using the `#123` syntax, and related merge requests with `!123` syntax.

optionally you can include
* background history
* technical notes
* developer api/usage information

## Development Sharing

Once your merge request is accepted and merged into `@dev-merge`, _IMMEDIATELY_ do a **squash merge request** into the `dev` branch. Be sure to retain the text from your merge request. The squashed merge will make the `dev` branch history much more atomic, but the complete commit history will still be retained in `@dev-merge` if it needs to be inspected for some reason.

---
## Old Steps

*NOTE: In practice nobody adheres to this structure, but we still have the issue of not being able to see changes between merge requests easily. In July 2021 we're trying something different that resembles the current ad-hoc practice*.

In the initial stages of development, we just use `dev` instead of formal integration branches. Follow steps 1-3, then in steps 7-9 substitute `dev` for `release-candidates`

1. merge all branches to `dev` for integration
2. fix any errors in `dev` using `fix-` branches
3. when `dev` looks good, glance through the `README` and `docs` folders to ensure they are in good shape.
4. create a `merge request` from `dev` to  `releasecandidates` branch, using our template (TBD)
5. have someone test the `release-candidates` merge request branch
6. accept the merge request
