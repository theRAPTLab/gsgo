"""
The Query type is a special, defining the GraphQL endpoints for reading data. The code
that actually returns data are defined in resolvers.js.

NOTES:
* GraphQL requires you to list every property you want; you can not retrieve a whole object
* See the Mutation type below for how to create/update
"""
type Query {
  locale(id: Int!): Locale
  localeNames: [LocalesType]!
  locales: [Locale]!
  project(id: String!): Project
  projectNames: [Project]!
  projects: [Project]!
}
"""
Additional type declarations describe the shape of object fields
"""
type LocalesType {
  id: Int!
  name: String!
}

type Locale {
  id: Int!
  name: String
  stage: StageProps
  gemstep: StepProps
  ptrack: PTrackProps
  pozyx: PozyxProps
  ursys: URSYSProps
}

type Vec2 {
  x: Float!
  y: Float!
}

type Bound {
  range: [Float]
  shape: [Vec2]
  rect: [Vec2]
}

type MainDisplayProps {
  memo: String
}

type StageProps {
  memo: String
  mainDisplay: MainDisplayProps
  playfield: Bound
}

type PTrackProps {
  memo: String
  xRange: Float
  yRange: Float
  xOff: Float
  yOff: Float
  xScale: Float
  yScale: Float
  xRot: Float
  yRot: Float
  zRot: Float
}

fragment TransformParts on PTrackProps {
  xRange
  yRange
  xOff
  yOff
  xScale
  yScale
  zRot
}

type PozyxProps {
  memo: String
  xRange: Float
  yRange: Float
  xOff: Float
  yOff: Float
  xScale: Float
  yScale: Float
  xRot: Float
  yRot: Float
  zRot: Float
  useAccelerometer: Boolean
}

type StepProps {
  memo: String
}

type URSYSProps {
  memo: String
}

"""
The Mutation type defines the API for sending data to GraphQL.
The code that handles the update is in resolvers.js
"""
type Mutation {
  updatePTrack(localeId: Int, input: PTrackInput): PTrackProps
  updatePozyx(localeId: Int, input: PozyxInput): PozyxProps
  updateProject(projectId: String, input: ProjectInput): Project
  updateMetadata(projectId: String, input: ProjectMetaInput): ProjectMeta
  updateRounds(projectId: String, input: [ProjectRoundInput]): [ProjectRound]
  updateBlueprints(
    projectId: String
    input: [ProjectBlueprintInput]
  ): [ProjectBlueprint]
  updateInstances(
    projectId: String
    input: [ProjectInstanceInput]
  ): [ProjectInstance]
}

"""
Input declarations are similar to Type declarations, but are specific to using
Mutations.

NOTES:
* You cannot define the shape of a shared data type between Query and Mutation
  declarations. GraphQL requires you to be explicit.
"""
input LocaleInput {
  ptrack: PTrackInput
}

input PTrackInput {
  memo: String
  xRange: Float
  yRange: Float
  xOff: Float
  yOff: Float
  xScale: Float
  yScale: Float
  xRot: Float
  yRot: Float
  zRot: Float
}

input PozyxInput {
  memo: String
  xRange: Float
  yRange: Float
  xOff: Float
  yOff: Float
  xScale: Float
  yScale: Float
  xRot: Float
  yRot: Float
  zRot: Float
  useAccelerometer: Boolean
}

"""
PROJECT Data
"""
type Project {
  id: String!
  label: String
  metadata: ProjectMeta
  rounds: [ProjectRound]
  blueprints: [ProjectBlueprint]
  instances: [ProjectInstance]
}
type ProjectMeta {
  top: Float
  right: Float
  bottom: Float
  left: Float
  wrap: [String]
  bounce: Boolean
  bgcolor: Float
  roundsCanLoop: Boolean
}
type ProjectRound {
  id: String!
  label: String
  time: Float
  intro: String
  outtro: String
  initScript: String
  endScript: String
}
type ProjectBlueprint {
  id: String!
  label: String
  isCharControllable: Boolean
  isPozyxControllable: Boolean
  scriptText: String
}
type ProjectInstance {
  id: String!
  label: String
  bpid: String
  initScript: String
}

"""
PROJECT Input
"""
input ProjectInput {
  id: String!
  label: String
  metadata: ProjectMetaInput
  rounds: [ProjectRoundInput]
  blueprints: [ProjectBlueprintInput]
  instances: [ProjectInstanceInput]
}
input ProjectMetaInput {
  top: Float
  right: Float
  bottom: Float
  left: Float
  wrap: [String]
  bounce: Boolean
  bgcolor: Float
  roundsCanLoop: Boolean
}
input ProjectRoundInput {
  id: String!
  label: String
  time: Float
  intro: String
  outtro: String
  initScript: String
  endScript: String
}
input ProjectBlueprintInput {
  id: String!
  label: String
  isCharControllable: Boolean
  isPozyxControllable: Boolean
  scriptText: String
}
input ProjectInstanceInput {
  id: String!
  label: String
  bpid: String
  initScript: String
}
