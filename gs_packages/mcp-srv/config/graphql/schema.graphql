"""
The Query type is a special, defining the GraphQL endpoints for reading data. The code
that actually returns data are defined in resolvers.js.

NOTES:
* GraphQL requires you to list every property you want; you can not retrieve a whole object
* See the Mutation type below for how to create/update
"""
type Query {
  locale(id: Int!): Locale
  localeNames: [LocalesType]!
  locales: [Locale]!
}
"""
Additional type declarations describe the shape of object fields
"""
type LocalesType {
  id: Int!
  name: String!
}

type Locale {
  id: Int!
  name: String
  stage: StageProps
  gemstep: StepProps
  ptrack: PTrackProps
  pozyx: PozyxProps
  ursys: URSYSProps
}

type Vec2 {
  x: Float!
  y: Float!
}

type Bound {
  range: [Float]
  shape: [Vec2]
  rect: [Vec2]
}

type MainDisplayProps {
  memo: String
}

type StageProps {
  memo: String
  mainDisplay: MainDisplayProps
  playfield: Bound
}

type PTrackProps {
  memo: String
  xRange: Float
  yRange: Float
  xOff: Float
  yOff: Float
  xScale: Float
  yScale: Float
  xRot: Float
  yRot: Float
  zRot: Float
}

fragment TransformParts on PTrackProps {
  xRange
  yRange
  xOff
  yOff
  xScale
  yScale
  zRot
}

type PozyxProps {
  memo: String
}
type StepProps {
  memo: String
}

type URSYSProps {
  memo: String
}

"""
The Mutation type defines the API for sending data to GraphQL.
The code that handles the update is in resolvers.js
"""
type Mutation {
  updatePTrack(localeId: Int, input: PTrackInput): PTrackProps
}

"""
Input declarations are similar to Type declarations, but are specific to using
Mutations.

NOTES:
* You cannot define the shape of a shared data type between Query and Mutation
  declarations. GraphQL requires you to be explicit.
"""
input LocaleInput {
  ptrack: PTrackInput
}

input PTrackInput {
  memo: String
  xRange: Float
  yRange: Float
  xOff: Float
  yOff: Float
  xScale: Float
  yScale: Float
  xRot: Float
  yRot: Float
  zRot: Float
}
